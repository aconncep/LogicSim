using System;

namespace LogicSim
{
    public static class HelpMenus
    {
        public static void HelpSimulateAuto()
        {
            Console.WriteLine("LogicSim will simulate your circuit and show you the output to every possible input combination automatically.\n" +
                              "You can specify a compute delay to slow down this process, which can be helpful in a classroom environment.\n" +
                              "Use 'step through inputs' if you want to manually control when the next input combination is simulated");
        }
        
        public static void HelpSimulateManual()
        {
            Console.WriteLine("LogicSim will ask you for input values, then it will simulate your circuit with those inputs and return the values of the output variables.");
        }
        
        public static void HelpStepInputs()
        {
            Console.WriteLine("LogicSim will simulate your circuit with every possible input combination, but it will not run automatically.\n" +
                              "A new input combination is simulated each time SPACE is pressed. This is especially helpful in a classroom environment.");
        }
        
        public static void HelpStepCircuit()
        {
            Console.WriteLine("This is the most in-depth way to see your circuit being simulated. LogicSim will show you each step of the simulation\n" +
                              "process, down to substituting variable values with a 0 or 1.");
        }
        
        public static void HelpShowZero()
        {
            Console.WriteLine("LogicSim will show you a table containing only the input combinations that result in outputs that are all 0.");
        }
        
        public static void HelpShowOne()
        {
            Console.WriteLine("LogicSim will show you a table containing only the input combinations that result in outputs that are all 1.");
        }
        
        public static void HelpHoldInput()
        {
            Console.WriteLine("This feature allows you to specify a value to use for a specific input variable.\n" +
                              "LogicSim displays what is basically a subset of all the possible input combinations, where one input is always 0/1.\n" +
                              "This is especially useful for circuits with many inputs.");
        }
        
        public static void HelpEquivalence()
        {
            Console.WriteLine("LogicSim will simulate your circuit and split the input combinations into equivalence classes\n" +
                              "where each class represents an output combination that was generated by one or more input combinations.");
        }
        
        public static void HelpReplace()
        {
            Console.WriteLine("This allows you to temporarily replace every instance of a single command in your circuit with a different command,\n" +
                              "without having to modify your HDL file manually.");
        }
        
        public static void HelpLearn()
        {
            Console.WriteLine("This is an interactive tutorial that will teach you the basics of combinational logic, starting with binary counting.\n" +
                              "Interactive quizzing is used to aid in comprehension. This feature is especially useful in a classroom environment.");
        }
        
        public static void HelpQuiz()
        {
            Console.WriteLine("LogicSim will ask you to enter the output values of each output variable for select random input combinations, keeping score\n" +
                              "of how many answers you get right. You also have the option of being timed.");
        }
        
        public static void HelpTruth()
        {
            Console.WriteLine("LogicSim will show you the truth table to any of the seven major logic operations");
        }
        
        public static void HelpClassroom()
        {
            Console.WriteLine("This special feature allows a classroom of students to work together to defeat a fictional monster by solving logic circuits.\n" +
                              "A special server-only version of LogicSim is run by a teacher or instructor, then each student's computer uses this selection\n" +
                              "to connect to the host. As students solve circuits correctly, they can see their progress defeating the monster on the\n" +
                              "teacher/instructor's computer screen, which should be projected. Students will also get periodic updates about progress\n" +
                              "defeating the monster delivered to their individual computers. Each student enters their first name while connecting, which\n" +
                              "allows teachers/instructors to see individual progress about each student, in addition to general class data\n" +
                              "(both of which is hidden from the students).");
        }

        public static void HelpReinterpret()
        {
            Console.WriteLine("Re-scans the HDL file and attempt to re-generate a circuit from it. Use this to re-interpret a modified HDL file without restarting the software.");
        }
    }
}